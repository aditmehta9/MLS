# -*- coding: utf-8 -*-
"""Lab2_Q1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1nX0MDhVvNv8JsbModLwLRrnvso1fdf0s
"""

import numpy as np
import pandas as pd
from sympy import symbols, Derivative

# a)
theta = symbols('theta')
l = theta**2
deriv1 = Derivative(l, theta)
# ans = deriv1.doit().subs(theta, 2)
deriv = deriv1.doit()

def GD1(alpha, deriv):
  
  theta_K = 2
  iterator = 1000
  while iterator > 0:
    theta_K1 = theta_K - alpha * deriv.subs(theta, theta_K)

    theta_K = theta_K1
    iterator = iterator - 1
  return theta_K1

GD1(0.01,deriv) # 0
GD1(0.1, deriv)  # 0

# b)

theta1, theta2 = symbols('theta1 theta2')
l = theta1**2 + theta2**2
deriv1 = Derivative(l, theta1)
deriv2 = Derivative(l, theta2)
deriv1 = deriv1.doit()
deriv2 = deriv2.doit()

def GD2(alpha, deriv, theta):
  
  theta1_k = 5
  theta2_k = 10
  iterator = 1000
  while iterator > 0:
    theta1_k1 = theta1_k - alpha * deriv[0].subs(theta[0], theta1_k)
    theta2_k1 = theta2_k - alpha * deriv[1].subs(theta[1], theta2_k)
    
    theta1_k = theta1_k1
    theta2_k = theta2_k1
    iterator = iterator - 1
  return [theta1_k1, theta2_k1]

deriv = [deriv1, deriv2];
theta = [theta1, theta2];
GD2(0.1, deriv, theta)

# c)
theta = symbols('theta')
l = (theta-1)**2
deriv1 = Derivative(l, theta)

deriv = deriv1.doit()

GD1(0.01, deriv)
GD1(0.1, deriv)

# d)
theta1, theta2 = symbols('theta1 theta2')
l = 2 * (theta1-1)**2 + 2 * (theta2-1)**2
deriv1 = Derivative(l, theta1)
deriv2 = Derivative(l, theta2)
deriv1 = deriv1.doit()
deriv2 = deriv2.doit()

deriv = [deriv1, deriv2];
theta = [theta1, theta2];
GD2(0.01, deriv, theta)

# e)
import statistics as st

data = pd.read_excel("data for Problem1.xlsx", "Sheet1")

mx = np.array(data["x"])
ma = st.mean(mx)
vx = st.stdev(mx)
x = np.atleast_2d( (data["x"] - ma)/vx ).T

o = np.ones((x.shape[0],1))
x = np.hstack((o,x))

y = np.atleast_2d(data["y"]).T

theta0, theta1 = symbols('theta0 theta1')
t = [[theta0], [theta1]]

exp = (y - np.dot(x,t))**2
exp = np.sum(exp)

deriv1 = Derivative(exp, theta0).doit()
deriv2 = Derivative(exp, theta1).doit()

def GD5(alpha, deriv, theta):
  
  minError = 0.001
  theta1_k = 5
  theta2_k = 10
  error= 10
  iterator = 0
  while abs(error) > minError:
    theta1_k1 = theta1_k - alpha * deriv[0].subs(theta[0], theta1_k).subs(theta[1], theta2_k)
    theta2_k1 = theta2_k - alpha * deriv[1].subs(theta[1], theta2_k).subs(theta[0], theta1_k)
    
    error1 = theta1_k1 - theta1_k;
    error = theta2_k1 - theta2_k;
    if error1 > error:
      error = error1
    iterator = iterator + 1;
    theta1_k = theta1_k1
    theta2_k = theta2_k1
     

  return [theta1_k1, theta2_k1, iterator]

deriv = [deriv1, deriv2];
theta = [theta0, theta1];
GD5(0.01, deriv, theta)

