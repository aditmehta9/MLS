# -*- coding: utf-8 -*-
"""Lab2_Q2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/15DDCicE1zVi6dmQ4m41JsGXmuvtr51Fr
"""

import numpy as np
import pandas as pd
import statistics as st
from sympy import symbols, Derivative

data = pd.read_excel("data for Problem1.xlsx", "Sheet1")

mx = np.array(data["x"])
ma = st.mean(mx)
vx = st.stdev(mx)
x = np.atleast_2d( (data["x"] - ma)/vx ).T
y = np.atleast_2d(data["y"]).T

xy = np.hstack((x,y))

X, Y, theta0, theta1 = symbols('X Y theta0 theta1')

J = (Y - theta0 - theta1*X)**2

deriv0 = Derivative(J, theta0).doit()
deriv1 = Derivative(J, theta1).doit()

def SGD(alpha, deriv, theta, xy):

  theta1_k = 5
  theta2_k = 10
  iterator = 500
  while iterator > 0:
    n = np.random.randint(0, xy.shape[0])
    theta1_k1 = theta1_k - alpha * deriv[0].subs(theta[0], theta1_k).subs(theta[1], theta2_k).subs(X, xy[n][0]).subs(Y, xy[n][1])
    theta2_k1 = theta2_k - alpha * deriv[1].subs(theta[0], theta1_k).subs(theta[1], theta2_k).subs(X, xy[n][0]).subs(Y, xy[n][1])
    
    theta1_k = theta1_k1
    theta2_k = theta2_k1
    iterator = iterator - 1

  return [theta1_k1, theta2_k1]

theta = [theta0, theta1]
deriv = [deriv0, deriv1]
SGD(0.01, deriv, theta, xy)

