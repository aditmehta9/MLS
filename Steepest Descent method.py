# -*- coding: utf-8 -*-
"""Lab2_Q3.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1O61CcKhb6eSM4Zbi1GMp7iuLViZKy9up
"""

import numpy as np
import pandas as pd
import statistics as st
from sympy import symbols, Derivative

# A)

theta = symbols('theta')
lt = theta**2
deriv_lt = Derivative(lt, theta).doit() # J'(theta)


alpha = symbols('alpha')
theta_a = 10 - alpha * deriv_lt.subs(theta, 10)   # theta_0 = 10
la = lt.subs(theta, theta_a)         # J(alpha)


deriv_la = Derivative(la, alpha).doit()      #J'(alpha)
d_deriv_la = Derivative(deriv_la, alpha).doit()      #J''(alpha)
division_la = deriv_la / d_deriv_la        # J'(alpha)/J''(alpha)

def SD1(deriv_lt, division_la):
  
  theta_K = 10
  alpha_K = 1
  iterator = 10
  while iterator > 0:
    
    theta_K1 = theta_K - alpha_K * deriv_lt.subs(theta, theta_K)
    alpha_K1 = alpha_K - division_la.subs(alpha, alpha_K)
    theta_K = theta_K1
    alpha_K = alpha_K1
    iterator = iterator - 1
    
  return theta_K

# print(division_la)
SD1(deriv_lt, division_la)

# B)

theta1, theta2 = symbols('theta1 theta2')
lt = theta1**2 + theta2**2
deriv_lt = [0]*2   # J'(theta)    theta = [theta1, theta2]
deriv_lt[0] = Derivative(lt, theta1).doit()
deriv_lt[1] = Derivative(lt, theta2).doit()


alpha = symbols('alpha')
theta1_a = 1203 - alpha * deriv_lt[0].subs(theta1, 1203).subs(theta2, 1590)   # theta_0 = [1203, 1590]
theta2_a = 1590 - alpha * deriv_lt[1].subs(theta1, 1203).subs(theta2, 1590) 
la = lt.subs(theta1, theta1_a).subs(theta2, theta2_a)         # J(alpha)

deriv_la = Derivative(la, alpha).doit()         # J'(alpha)
d_deriv_la = Derivative(deriv_la, alpha).doit()  # J''(alpha)
division_la = deriv_la / d_deriv_la           #  #J'(alpha) /  #J''(alpha)

def SD2(deriv_lt, division_la):
  
  theta1_k = 1203
  theta2_k = 1590
  alpha_k = 1
  iterator = 10
  
  while iterator > 0:
    theta1_k1 = theta1_k - alpha_k * deriv_lt[0].subs(theta1, theta1_k)
    theta2_k1 = theta2_k - alpha_k * deriv_lt[1].subs(theta2, theta2_k)
    
    alpha_k1 = alpha_k - division_la.subs(alpha, alpha_k)
 
    theta1_k = theta1_k1
    theta2_k = theta2_k1
    alpha_k = alpha_k1
    iterator = iterator - 1
    
  return [theta1_k1, theta2_k1]

# print(division_la)
SD2(deriv_lt, division_la)

# C)

theta = symbols('theta')
lt = (theta - 1)**2
deriv_lt = Derivative(lt, theta).doit() # J'(theta)


alpha = symbols('alpha')
theta_a = 10 - alpha * deriv_lt.subs(theta, 10)   # theta_0 = 10
la = lt.subs(theta, theta_a)         # J(alpha)


deriv_la = Derivative(la, alpha).doit()      #J'(alpha)
d_deriv_la = Derivative(deriv_la, alpha).doit()      #J''(alpha)
division_la = deriv_la / d_deriv_la        # J'(alpha)/J''(alpha)

# print(division_la)
SD1(deriv_lt, division_la)

# D)

theta1, theta2 = symbols('theta1 theta2')
lt = (theta1 - 1)**2 + (theta2 - 1)**2
deriv_lt = [0]*2   # J'(theta)    theta = [theta1, theta2]
deriv_lt[0] = Derivative(lt, theta1).doit()
deriv_lt[1] = Derivative(lt, theta2).doit()


alpha = symbols('alpha')
theta1_a = 1293 - alpha * deriv_lt[0].subs(theta1, 1293).subs(theta2, 1559)   # theta_0 = [123, 1559]
theta2_a = 1559 - alpha * deriv_lt[1].subs(theta1, 1293).subs(theta2, 1559) 
la = lt.subs(theta1, theta1_a).subs(theta2, theta2_a)         # J(alpha)

deriv_la = Derivative(la, alpha).doit()         # J'(alpha)
d_deriv_la = Derivative(deriv_la, alpha).doit()  # J''(alpha)
division_la = deriv_la / d_deriv_la           #  #J'(alpha) /  #J''(alpha)

# print(division_la)
SD2(deriv_lt, division_la)

# E)

data = pd.read_excel("data for Problem1.xlsx", "Sheet1")

mx = np.array(data["x"])
ma = st.mean(mx)
vx = st.stdev(mx)
x = np.atleast_2d( (data["x"] - ma)/vx ).T

o = np.ones((x.shape[0],1))
x = np.hstack((o,x))

y = np.atleast_2d(data["y"]).T

theta0, theta1 = symbols('theta0 theta1')
t = [[theta0], [theta1]]

lt = (y - np.dot(x,t))**2
lt = np.sum(lt)

deriv_lt = [0]*2

deriv_lt[0] = Derivative(lt, theta0).doit()
deriv_lt[1] = Derivative(lt, theta1).doit()

alpha = symbols('alpha')
theta0_a = 5686 - alpha * deriv_lt[0].subs(theta0, 5686).subs(theta1, -1516)  # theta_0 = [5686, -1516]
theta1_a = -1516 - alpha * deriv_lt[1].subs(theta0, 5686).subs(theta1, -1516)
la = lt.subs(theta0, theta0_a).subs(theta1, theta1_a)         # J(alpha)

deriv_la = Derivative(la, alpha).doit()         # J'(alpha)
d_deriv_la = Derivative(deriv_la, alpha).doit()  # J''(alpha)
division_la = deriv_la / d_deriv_la           #  #J'(alpha) /  #J''(alpha)
division_la

def SD5(deriv_lt, division_la):
  minError = 0.01
  iterator = 0
  theta1_k = 5686
  theta2_k = -1516
  alpha_k = 1
  error = 10
  while abs(error) > minError:
    
    theta1_k1 = theta1_k - alpha_k * deriv_lt[0].subs(theta0, theta1_k).subs(theta1, theta2_k)
    theta2_k1 = theta2_k - alpha_k * deriv_lt[1].subs(theta0, theta1_k).subs(theta1, theta2_k)
    
    alpha_k1 = alpha_k - division_la.subs(alpha, alpha_k)
    
    error1 = theta1_k1 - theta1_k;
    error = theta2_k1 - theta2_k;
    if error1 > error:
      error = error1
    iterator = iterator + 1;
    

    theta1_k = theta1_k1
    theta2_k = theta2_k1
    alpha_k = alpha_k1 
  return [theta1_k1, theta2_k1, iterator]

# print(division_la)
SD5(deriv_lt, division_la)

